<style>
  .all-collections-section {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    width: 100%;
    padding: 20px;
  }

  .prints-container {
    display: flex;
    flex-wrap: wrap;
    gap: 3px;
    flex: 5;
  }

  .collection-filters {
    display: flex;
    flex-direction: column;
    margin-bottom: 10px;
    flex: 1;
    gap:1rem;
    
  }

  .collection-filters button {
    display: inline-block;
    background: none;
    border: none;
    transition: transform 0.5s ease;
    text-align: left;
    font-size: 1.5rem;
    position: relative;
    padding-left: 35px; /* Оставляем место для квадратика */
  }

  .collection-filters button:hover {
    color: grey;
    transform: scale(1.1);
    cursor:pointer;
  }

  .collection-filters button::before {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 20px;
    height: 20px;
    border: 1px solid black;
    background: white;
  }

  .collection-filters button.active::before {
    content: '✔';
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 1rem;
    color: black;
  }

  .collection-items {
    display: flex;
    flex-wrap: wrap;
    width: 100%;
    height: 100%;
  }

  .collection-item {
    width: 20%;
    text-align:center;
    margin: 0 1.5em 3em;
    opacity: 0;
    transform: scale(0.9);
    transition: opacity 0.5s ease, transform 0.5s ease;
    text-decoration: none;
  }

  .prints-content:hover {
    transform: scale(1.05);
  }

  .collection-item img {
    max-width: 100%;
    height: auto;
    margin-top: 10px;
  }

  .prints-content {
    background: #F5F5F5;
    border-radius: 3rem;
    width: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    transition: transform 0.5s ease;
  }

  .collection-item.visible {
    display: flex;
    opacity: 1;
    transform: scale(1);
  }

  @media screen and (max-width: 768px) {
    .collection-item {
      width: 100%;
    }

    .all-collections-section {
      flex-direction: column;
      justify-content: center;
      align-items: baseline;
    }
  }
  .filter-button{
    font-family: Assistant;
    cursor:pointer;
    touch-action: manipulation;
  }
  .custom_h3{
    font-weight:100;
    margin:0;
  }
</style>

 <div class="page-width all-collections-section scroll-trigger animate--slide-in">
  <div class="collection-filters">
    <h3 class ="custom_h3">Категорія</h3>
    <button class="filter-button" data-filter="all">All</button>
    <button class="filter-button" data-filter="STLV">STLV</button>
    <button class="filter-button" data-filter="SUNSET GOONS">SUNSET GOONS</button>
    <button class="filter-button" data-filter="BLACK WHITE">BLACK WHITE</button>
    <button class="filter-button" data-filter="GUNS">GUNS</button>
  </div> 



  <div class="prints-container">
    <div class="collection-items">
      {% for collection in collections %}
        {% if collection.metafields.filters.category %}
          <a href="{{ collection.url }}" class="collection-item visible" data-categories="{{ collection.metafields.filters.category }}">
            <div class="prints-content">
              <img src="{{ collection.image | image_url: width: 432, height: 550 }}" alt="image">
              <h3>{{ collection.title }}</h3>
            </div>
          </a>
        {% endif %}
      {% endfor %}
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const filterButtons = document.querySelectorAll('.filter-button');
    const collectionItems = document.querySelectorAll('.collection-item');

    filterButtons.forEach(button => {
      button.addEventListener('click', function() {
        // Удаляем класс active со всех кнопок
        filterButtons.forEach(btn => btn.classList.remove('active'));

        // Добавляем класс active к текущей кнопке
        this.classList.add('active');

        const filter = this.getAttribute('data-filter');

        collectionItems.forEach(item => {
          const categories = item.getAttribute('data-categories');
          if (filter === 'all' || categories.includes(filter)) {
            item.style.display = 'flex';
            setTimeout(() => item.classList.add('visible'), 10);
          } else {
            item.classList.remove('visible');
            setTimeout(() => item.style.display = 'none', 500);
          }
        });
      });
    });
  });
</script>

{% schema %}
{
  "name": "Collections Section",
  "settings": [
    {
      "type": "text",
      "id": "section_heading",
      "label": "Section Heading",
      "default": "Our Collections"
    }
  ],
  "presets": [
    {
      "name": "Filtered Collections"
    }
  ]
}
{% endschema %}
